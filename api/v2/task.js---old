"use strict";
var async = require('async');
var db = require('../../models');
var response = require('../../helpers/response');
var _ = require('underscore');
var moment = require('moment');
var sequelize = require('sequelize');
var log = require("../../api_logs/create_logs");
var logFile = "task_log.txt";
 
exports.all = function (req, res) {
    var filters = req.query;
    var currentUser = req.currentUser;
    whereClause(filters, currentUser, function (err, clause,q,limit,offset,al,status) {
        if (err) {
            log.run(req,response(res).customError(err),logFile);
            response(res).failure(err);
        }

        if(status == false)
        {
           log.run(req,response(res).customError("Not Authorized !"),logFile);
           response(res).failure("Not Authorized !");
        } 

        else {
            db.task.findAndCountAll({
                where: q || {},
                include: [
                    { model:db.contact },
                    { model : db.lead, where: { active: true },required :false , include: [{ model: db.lead_stage_calculation },{ model: db.contact , where: {  $and: [{contact_id: { $ne : null }}, { active: true }]  }, required: false}]}
                ],
                limit: limit , offset: offset,
                order: [["last_updated","ASC"]]

            }).then(function (Task) {
               // res.send(Task);
                var obContact;
                var obLead;
                var items = Task.rows.map(function (c) {

                     try{
                            obContact = returnContact(c.contact);
                           
                    }catch(e)
                    {
                        //// console.log("error---->"+e);
                        obContact = c.contact;
                    }

                    try{
                           if(c.lead && c.lead.contact != null ){
                            obLead = returnLead(c.lead);
                        }else{
                            obLead = null;
                        }

                     }catch(e)
                     {
                          obLead = c.lead
                     }   
                    return c.toModel(obContact,obLead);
                });

                 var moreRecordsAvailable = false;

                if(Task.count > Task.rows.length)
                {
                     moreRecordsAvailable = true;
                }



                //response(res).page(items);
                var resJson = {
                        success: true,
                        ErrorCode : 100,
                        message: 'completed sucessfully',
                        items: items,
                        recordCount: items.length,
                        ServerCurrentTime: new Date().getTime(),
                        moreRecordsAvailable: moreRecordsAvailable
                };

                log.run(req,resJson,logFile);

                res.json(resJson);


            }).catch(function (err) {

                log.run(req,response(res).customError(err),logFile);
                response(res).failure(err);
            });
        }
    });
};

exports.createOrUpdate = function (req, res) {
    var Model = req.body;

    var id = req.params.id || req.params.TaskId;
    var action = "";

    if ((id && id != 0)) {
        action = "update";
        db.task.findById(id)
            .then(function (task) {
                toEntityUpdate(task, Model, req.currentUser,action)
                    .save()
                    .then(function (entity) {

                        log.run(req,entity.toModelUpdate(),logFile);
                        response(res).data(entity.toModelUpdate());
                    })
                    .catch(function (err) {
                        log.run(req,response(res).customError(err),logFile);
                        response(res).failure(err);
                    });
            })
            .catch(function (err) {
                log.run(req,response(res).customError(err),logFile);
                response(res).failure(err);
            });
    } else {


        action = "create";

        var currentTime = new Date().getTime();
        var reqInfo = { cont_id : null ,ld_id : null ,currentTime : currentTime  };

        if(req.body.Contact)
        {
            createContact(req,res,reqInfo);
        }

        if(req.body.Lead)
        {
            setTimeout(function()
            {
              createLead(req,res,reqInfo);
            },2000);
            
        }

        var localId = req.body.LocalId || null;

         setTimeout(function(){

             db.task.build(toEntity({}, Model, req.currentUser,action,reqInfo.cont_id,reqInfo.ld_id))
                .save()
                .then(function (entity) {
                    db.task.find(
                    {
                        where : { task_id : entity.task_id  },
                        include : [
                           {model: db.contact },
                           {model: db.lead , include: [{ model: db.lead_stage_calculation }]}
                        ]

                     }).then(function(tks)
                    {

                       var obContact;
                       var obLead;
                       try{
                       obContact = returnContact(tks.contact);

                       log.run(req,obContact,"contact_log.txt");
                           
                    }catch(e)
                    {
                        //// console.log("error---->"+e);
                          obContact = tks.contact;
                        if(req.body.ContactId)
                        {
                             db.contact.find(
                           {
                              where: { contact_id : req.body.ContactId }
                               
                           }).then(function(c)
                           {
                             try{
                                obContact = returnContact(c);
                                reqInfo.cont_id = obContact.ContactId;
                                //reqInfo.cont_id = req.body.ContactId;
                             }catch(e)
                             {
                                obContact = null;
                             }
                              

                           });
                        }
                      
                    }

                     try{
                            obLead = returnLead(tks.lead);
                            log.run(req,obLead,"lead_log.txt");

                     }catch(e)
                     {
                          obLead = tks.lead

                          if(req.body.LeadId)
                          {
                            db.lead.find(
                            {
                                where: { lead_id : req.body.LeadId},
                                include: [{model: db.lead_stage_calculation}]

                            }).then(function(l)
                            {
                                try{
                                    obLead  = returnLead(l);
                                    reqInfo.ld_id = obLead.LeadId;

                                }catch(e)
                                {
                                    obLead = null;
                                }

                            });
                          }
                     }   

                      setTimeout(function(){
                        db.task.update({ contact_id : reqInfo.cont_id , lead_id : reqInfo.ld_id },
                        {
                           where : { task_id : tks.task_id  }
                        }).then(function(t)
                        {
                             log.run(req,entity.toModelPost(obContact,obLead,localId),logFile);
                             response(res).data(entity.toModelPost(obContact,obLead,localId));
                        }).catch(function(err){
                            log.run(req,response(res).customError(err),logFile);
                            response(res).failure(err);
                        });
                        
                      },2000);
                    });
                   
                })
                .catch(function (err) {
                    log.run(req,response(res).customError(err),logFile);
                    response(res).failure(err);
                });

            
        },3000);

           
    }
};

exports.get = function (req, res) {
    var id = req.params.id;
    db.task.find({
        where: {
            task_id: id
        },
        include: [
            { all: true }
        ]
    }).then(function (entity) {
         var obContact;
         var obLead;
         try{
            obContact = returnContact(entity.contact);

        }catch(e)
        {
            obContact = entity.contact
        }

        try{
            obLead = returnLead(entity.lead);

        }catch(e)
        {
            obLead = entity.lead
        }
         log.run(req,entity.toModel(obContact,obLead),logFile);
        response(res).data(entity.toModel(obContact,obLead));
    }).catch(function (err) {
        log.run(req,response(res).customError(err),logFile);
        response(res).failure(err);
    });
};

exports.delete = function (req, res) {
    var currentTime = new Date().getTime();
    var id = req.params.id;
    db.task.findById(id)
            .then(function (object) {
                object.active = false;
                object.last_updated = currentTime;
                object.save()
                    .then(function (entity) {
                        log.run(req,response(res).returnSuccess(),logFile);
                        response(res).success();
                    })
                    .catch(function (err) {
                        log.run(req,response(res).customError(err),logFile);
                        response(res).failure(err);
                    });
            })
            .catch(function (err) {
                log.run(req,response(res).customError(err),logFile);
                response(res).failure(err);
            });
};

var toEntity = function (entity, data, currentUser,action,contact_id,lead_id) {    
    
    entity.name = data.Name;
    entity.account_id = currentUser.AccountId;
    entity.reminder = data.Reminder;     
    entity.dueDate = data.Duedate;
    entity.dueDateTime = data.Duedatetime;
    entity.completedOn = data.Completedon;
    entity.completedOnDate = data.Completedondate;
    entity.contact_id = contact_id;    
    entity.lead_id = lead_id; 
    entity.employee_id = currentUser.EmployeeId; 
    entity.last_updated = new Date().getTime();
    if(action == "create")
    {
        entity.initial_create = new Date().getTime();
        entity.last_updated = entity.initial_create;
    }
    
    return entity;
};


var toEntityUpdate = function (entity, data, currentUser,action) {    
    
    entity.name = data.Name;
    entity.account_id = currentUser.AccountId;
    entity.reminder = data.Reminder;     
    entity.dueDate = data.Duedate;
    entity.dueDateTime = data.Duedatetime;
    entity.completedOn = data.Completedon;
    entity.completedOnDate = data.Completedondate;
    entity.contact_id = data.ContactId;    
    entity.lead_id = data.LeadId; 
    //entity.employee_id = currentUser.EmployeeId; 
    entity.last_updated = new Date().getTime();
  
    return entity;
};




var whereClause = function (filters, currentUser, callback) {
   var clause = [{  }];
     var empArray = [];
     var emp = null;
     var q = null;
     var limit = 5;
     var offset = 0;
    // if (filters.timeStamp) {
    //     clause.push(sequelize.or([{ 'last_updated': { $ne: null } }, { 'last_updated': { $gte: filters.timeStamp } }], [{ 'last_updated': null }, { 'initial_create': { $gte: filters.timeStamp } }]));
    // }

    db.access_level.findOne({
        where : { employee_id : currentUser.EmployeeId },
        attributes : ['access_level'],
        group : ['access_level']

    }).then(function(al)
    {

        /* if(al && al.access_level == 2)
         {
          // condition 1 
          // console.log("condition 1 is called ----------->");
          

            db.employee.findAll(
            {
                where : { reporting_person : currentUser.EmployeeId },
                attributes : ['employee_id']

            }).then(function(emp)
            {
                emp.map(function(item)
                {
                    empArray.push(item.employee_id);

                });
                db.employee.findAll(
                {
                    where : { reporting_person : { in : empArray }  }

                }).then(function(empS)
                {


                    if(empS)
                    {
                         empS.map(function(itemS)
                         {
                            empArray.push(itemS.employee_id);

                         });

                    }

                    // console.log("Emp Array is--->"+empArray);


                     if(filters.timestamp && filters.emp_id)
                     {
                          empArray.push(currentUser.EmployeeId);
                          var empId = parseInt(filters.emp_id);
                
                          // console.log("INdex  Is--------->"+empArray.indexOf(empId));
                           if(empArray.indexOf(empId) != -1)
                           {

                             q = { employee_id : filters.emp_id , last_updated : { $gt : filters.timestamp } };
                             callback(null, clause,q,limit,offset,al,true);


                           }else
                           {
                              callback(null, clause,q,limit,offset,al,false);

                           }
         
                        }else
                        {

                             q = { employee_id : currentUser.EmployeeId };
                             if(filters.timestamp)
                             {
                                q = { employee_id : currentUser.EmployeeId , last_updated : { $gt : filters.timestamp } };
                             }

                             callback(null, clause,q,limit,offset,al,true);
                        }





                });

               


            });
         }else if(al && al.access_level == 1)*/
		 if(al)
         {
            // condition 2 

             // console.log("condition 2 is called ----------->");

            if(filters.timestamp && filters.emp_id)
            {
              // condition 3
               // console.log("condition 3 is called ----------->");
              if(currentUser.EmployeeId == filters.emp_id)
              {
                 //  condition 3.1 
                  // console.log("condition 3.1 is called ----------->");
                  q = { employee_id : filters.emp_id , last_updated : { $gt : filters.timestamp }, active: true };
                  callback(null, clause,q,limit,offset,al,true);

              }else
              {
                // condition 3.2

                 // console.log("condition 3.2 is called ----------->");
                 callback(null, clause,q,limit,offset,al,false);
              }


            }else
            {
               // condition 4
                // console.log("condition 4 is called ----------->");
                 q = { employee_id : currentUser.EmployeeId , active: true  };
                 if(filters.timestamp)
                 {
                    q = { employee_id : currentUser.EmployeeId , last_updated : { $gt : filters.timestamp }, active: true  };
                 }

                 callback(null, clause,q,limit,offset,al,true);

            }

            //  q = { employee_id : currentUser.EmployeeId , active:true };

            // if(filters.timestamp)
            // {
            //   q = { employee_id : currentUser.EmployeeId , active:true , last_updated : { $gt : filters.timestamp } };

            // }
            

            
         }else
         {
            // condition 5 
             // console.log("condition 5 is called ----------->");
             callback(null, clause,q,limit,offset,al,false);
         }
         
        
        
        

    });
};

function createContact(req,res,reqInfo)
{

   var objectContact = req.body.Contact;
    objectContact.name = objectContact.Name;
    objectContact.account_id = req.currentUser.AccountId;
    objectContact.number = objectContact.Number;
    objectContact.email = objectContact.Email;
    objectContact.address = objectContact.Address;
    objectContact.IsLink = objectContact.isLink;
    objectContact.organization_id = objectContact.OrganizationId;
    objectContact.employee_id = req.currentUser.EmployeeId;
    objectContact.initial_create = reqInfo.currentTime;
    objectContact.last_updated = reqInfo.currentTime;
    db.contact.create(objectContact).then(function(cont)
    {
        reqInfo.cont_id = cont.contact_id;


    });

}

function createLead(req,res,reqInfo)
{
   
   var objectLead = req.body.Lead;

   
    
    db.lead.create({
     name :objectLead.Name,
    account_id :req.currentUser.AccountId,
    amount : objectLead.Amount,     
    isWon :objectLead.Iswon,
    expectedClouserDate : objectLead.Expectedclouserdate,
    expectedClouserDateTime : objectLead.Expectedclouserdatetime,
    isFresh :objectLead.Isfresh,
    commissionRate:objectLead.Commissionrate,
    lostReason : objectLead.Lostreason,
    prospectsDate :objectLead.Prospectsdate,
    proposal_finalized_date:objectLead.ProposalFinalizedDate,
    contactedDate:objectLead.Contacteddate,
    proposalGivenDate :objectLead.Proposalgivendate,
    inNegotiationDate:objectLead.Innegotiationdate,
    wonDate:objectLead.Wondate,
    lostDate :objectLead.Lostdate,
    currentState:objectLead.Currentstate,
    amc_id :objectLead.AmcId,
    lead_source_id:objectLead.LeadSourceId,
    product_id :objectLead.ProductId,
    organization_id:objectLead.OrganizationId,
    won_lost_by_employee_id:objectLead.WonLostByEmployeeId,
    won_lost_by_employee_name :objectLead.WonLostByEmployeeName,
    contact_id : reqInfo.cont_id,
    initial_create :reqInfo.currentTime,
    last_updated :reqInfo.currentTime,
    employee_id :req.currentUser.EmployeeId
    }).then(function(lead)
    {
       // res.send(lead);
        reqInfo.ld_id = lead.lead_id;
        if(req.body.Lead.LeadStageCalculation){
            createLeadStageCalculations(req.body.Lead.LeadStageCalculation,req,res,lead,reqInfo);
        }

    }).catch(function(err){

        response(res).failure(err);
    });

}

function createLeadStageCalculations(LeadStageCalculations,req,res,obLead,reqInfo){

  var objectLSC = LeadStageCalculations;
    var realObjectLSC = [];

    var tempJson;
   

     for(var i in objectLSC)
    {
       
        var lsc = objectLSC[i];
       
        tempJson = {  
          account_id: req.currentUser.AccountId,
          active : lsc.Active || null,
          number_of_days : lsc.NumberOfDays || null,
          stage_name : lsc.StageName || null,
          status : lsc.Status || null,
          start_date : lsc.StartDate || null,
          end_date : lsc.EndDate || null,
          initial_position_level: lsc.InitialPositionLevel || null,
          updated_position_level: lsc.UpdatedPositionLevel || null,
          stage_setting_id: lsc.StageSettingId || null,
          lead_id : obLead.lead_id,
          employee_id: obLead.employee_id,
          initial_create : obLead.initial_create,
          last_updated : obLead.last_updated
          

       }

        realObjectLSC.push(tempJson);
    }

    db.lead_stage_calculation.bulkCreate(realObjectLSC).then(function(lsc){

        db.lead_stage_calculation.findAll({

          where: { lead_id : reqInfo.ld_id }
        }).then(function(lscObject){
               
        }).catch(function(err){
            response(res).failure(err);
        });
        
        

    }).catch(function(err){
 
         response(res).failure(err);
    });

    
}


function returnContact(obContact)
{
    var jsonContact = {
       
        ContactId: obContact.contact_id,
        Name : obContact.name,
        Number : obContact.number,
        Email : obContact.email,
        Address : obContact.address,
        IsLink : obContact.isLink,
        OrganizationId: obContact.organization_id,
        EmployeeId:obContact.employee_id,
        InitialCreate:obContact.initial_create,
        LastUpdated:obContact.last_updated,
        //Active: obContact.active

    }


    return jsonContact;


}


function returnLead(obLead)
{

    var obLSC = null;
    if(obLead.lead_stage_calculations){


        var obLSC = obLead.lead_stage_calculations.map(function (c) {
                    return c.toModel();
                });
    }
    var  jsonLead = {

      LeadId: obLead.lead_id,
      Name: obLead.name,
      Amount: obLead.amount ,
      Iswon: obLead.isWon,
      Expectedclouserdate: obLead.expectedClouserDate || null,
      Expectedclouserdatetime: obLead.expectedClouserDateTime,
      Isfresh: obLead.isFresh,
      Commissionrate: obLead.commissionRate,
      Lostreason: obLead.lostReason,
      Prospectsdate: obLead.prospectsDate,
      Contacteddate: obLead.contactedDate,
      Proposalgivendate: obLead.proposalGivenDate,
      ProposalFinalizedDate: obLead.proposal_finalized_date,
      Innegotiationdate: obLead.inNegotiationDate,
      Wondate: obLead.wonDate,
      Lostdate: obLead.lostDate,
      Currentstate: obLead.currentState,
      ContactId: obLead.contact_id,
      AmcId: obLead.amc_id,
      EmployeeId: obLead.employee_id,
      LeadSourceId: obLead.lead_source_id,
      LeadSourceSubString: obLead.lead_source_sub_string,
      ProductId: obLead.product_id,
      OrganizationId: obLead.organization_id,
      WonLostByEmployeeId: obLead.won_lost_by_employee_id,
      WonLostByEmployeeName: obLead.won_lost_by_employee_name,
      LeadStageCalculation: obLSC,
      InitialCreate: obLead.initial_create,
      LastUpdated: obLead.last_updated,
      //Active: obLead.active


      
    }

    return jsonLead;
}


